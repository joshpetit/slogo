@startuml
package Events {

	interface UpdateTurtle {
		+ execute(TurtleInfo e)
	}

	interface UpdateCommands {
		+ execute(CommandsInfo e)
	}

	interface UpdateVariables {
		+ execute(VariablesInfo e)
	}

	class VariablesInfo {
		+ getVariables() : List<DisplayableVariable>
	}

	class CommandsInfo {
		+ getCommands() : Map<String, String>
	}

	class TurtleInfo {
		+ getX() : int
		+ getY() : int
		+ getRotation() : double
	}

	interface DisplayableVariable {
		+ getName() : String
		+ getValue() : String
	}
}

package View {
	class View {
		+ View(Controller controller, TrackableEnvironment model)
	}


	note top of TurtleSandbox
		where the turtle's displayed :)
		Probably extends some kind of Pane
	end note
	class TurtleSandbox {

	}

	note top of ViewController
		Set aspects of the view
		such as language and stuff. Nested
		class implements this in view and is
		passed to classes that manipulate
		how the view looks.
	end note
	interface ViewController {
		+ setBackground(String color)
		+ setLanguage(String englishSucksAmirite)
		+ otherStyleMethods()
	}

	note top of ModelController
		This contains methods needed
		to talk to the model from the view.
	end note
	class ModelController {
		+ sendCommand(String command)
		+ sendCommand(File command)
		+ setLanguage(String lang)
	}

	note top of SettingsScene
		Extens the Scene class.
	end note
	class SettingsScene {
		- controller : ViewController
	}
}

SettingsScene --> "1" View
ModelController --> "1" View
ViewController --> "1" View
TurtleSandbox --> "1" View

package Model {
	note top of TrackableEnvironment
		The trackable interface will
		define a class internal to the
		model which represents a turtle.
		This interface defines how a view
		can observe the changes.
	end note
	interface TrackableEnvironment {
		+ setOnTurtleUpdate(UpdateTurtle callback);
		+ setOnVariableUpdate(UpdateVariable callback);
		+ setOnCommandUpdate(UpdateCommands callback);
		+ runCommand(String command) : double
	}

	note bottom of TrackableEnvironment
		One possible change is to create a single
		interface that has all the callbacks.
	end note
	class Environment implements TrackableEnvironment {
		- Parser : Parser
		# notifyTurtleUpdate(TurtleInfo info)
		# notifyCommandUpdate(CommandInfo info)
		# notifyVariableUpdate()
		+ runCommand(String command) : double
	}

	note left of ExecutionBundle
		This is a private nested class 
		within the Environment. It is passed
		to ASTs and the Turtle to give them
		access to needed commands.
	end note
	class ExecutionBundle implements InfoBundle {
	}

	interface InfoBundle {
		# getTurtle() : Turtle
		# getLookupTable() : Map<String, AST>
		# notifyTurtleUpdate(TurtleInfo info)
	}

	note left of EnvironmentFactory
		Just a static class that
		creates an Environment.
	end note
	class EnvironmentFactory {
		{static} createEnvironment() : TrackableEnvironment
	}

	note bottom of Turtle
		When move or rotate is called
		it notifies the environment
	end note
	class Turtle {
		- x
		- y
		- rotation
		- Environment
		# setXY(double x, double y)
		# rotate(double rotation)
		# move (double x);
	}

	interface Parser {
		+ parseCommand(String Command) : AST
	}

	note top of ASTNode
		A variable or function that
		forms of tree of evaluatable
		ASTs
	end note
	abstract class ASTNode {
		- children: List<ASTNode>
		+ evaluate(InfoBundle env) : double
	}

	class Command extends ASTNode {
	}

	class Variables extends ASTNode {
	}
}
ExecutionBundle --> "1" Environment
Turtle --> "1" Environment

'Model -[hidden]--> Events
@enduml
